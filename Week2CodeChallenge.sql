
CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID NUMBER NOT NULL PRIMARY KEY, 
    EMP_FIRSTNAME VARCHAR2(100) NOT NULL,
    EMP_LASTNAME VARCHAR2(100) NOT NULL,
    DEPARTMENT_ID NUMBER,
    SALRARY NUMBER   
);
/

ALTER TABLE EMPLOYEE DROP COLUMN SALARY;
/
ALTER TABLE EMPLOYEE ADD SALARY NUMBER(20,2);
/

ALTER TABLE EMPLOYEE ADD EMP_EMAIL VARCHAR2(100);
/

ALTER TABLE EMPLOYEE
ADD FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID);
/

CREATE TABLE DEPARTMENT (
    
    DEPARTMENT_ID NUMBER NOT NULL PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(100) NOT NULL
);
/

CREATE SEQUENCE EMPLOYEE_SQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1;
 
 CREATE SEQUENCE DEPARTMENT_SQ
 START WITH 1 
 INCREMENT BY 1;
 /
 
CREATE OR REPLACE TRIGGER EMPLOYEE_TRIG
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
	SELECT EMPLOYEE_SQ.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/
 
CREATE OR REPLACE TRIGGER DEPARTMENT_TRIG
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
	SELECT DEPARTMENT_SQ.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;
/

-- 1
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Engineering'); 
/
-- 2
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Medicine'); 
/
-- 3
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Accounting'); 
/

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY) VALUES ('Tony', 'Stark', 1, 10000000.00);
/

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY) VALUES ('Elon', 'Musk', 1, 10000000.00);
/
UPDATE EMPLOYEE SET SALARY = 10000000.00 WHERE EMPLOYEE_ID = 1 OR EMPLOYEE_ID = 6;

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY) VALUES ('Stephen', 'Strange', 2, 2000000.00);
/
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY) VALUES ('Bruce', 'Banner', 2, 2000000.00);
/
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY) VALUES ('Pepper', 'Potts', 3, 500000.00);
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY) VALUES ('Fred', 'Awah', 3, 500000.00);
/
UPDATE EMPLOYEE SET SALARY = 10000000.00 WHERE EMPLOYEE_ID = 1 OR EMPLOYEE_ID = 6;
/
UPDATE EMPLOYEE SET SALARY = 2000000.00 WHERE EMPLOYEE_ID = 2 OR EMPLOYEE_ID = 3;
/
UPDATE EMPLOYEE SET SALARY = 500000.00 WHERE EMPLOYEE_ID = 4 OR EMPLOYEE_ID = 5;
/

-- email
UPDATE EMPLOYEE SET EMP_EMAIL = 'elon@challenge.com' WHERE EMPLOYEE_ID = 1;
/
UPDATE EMPLOYEE SET EMP_EMAIL = 'tony@challenge.com' WHERE EMPLOYEE_ID = 6;
/

UPDATE EMPLOYEE SET EMP_EMAIL = 'stephen@challenge.com' WHERE EMPLOYEE_ID = 2;
/
UPDATE EMPLOYEE SET EMP_EMAIL = 'Bruce@challenge.com' WHERE EMPLOYEE_ID = 3;
/

UPDATE EMPLOYEE SET EMP_EMAIL = 'Pepper@challenge.com' WHERE EMPLOYEE_ID = 4;
/
UPDATE EMPLOYEE SET EMP_EMAIL = 'Fred@challenge.com' WHERE EMPLOYEE_ID = 5;
/




CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE 
(D_ID IN EMPLOYEE.DEPARTMENT_ID%TYPE)

IS
checker NUMBER;
avgSalary Number (20, 2);
doesIdExist NUMBER(1);

BEGIN
    SELECT count(EMPLOYEE_ID)
    INTO checker
    FROM EMPLOYEE
    WHERE EMPLOYEE.DEPARTMENT_ID = D_ID;
    
    IF checker < 0 THEN
        doesIdExist := 0;
        avgSalary := 0;
    END IF;
    
    doesIdExist := 1;

    UPDATE EMPLOYEE SET SALARY = SALARY + (SALARY * (10/100))
    WHERE EMPLOYEE.DEPARTMENT_ID = D_ID;
    COMMIT;
    
    SELECT AVG(SALARY) 
    INTO avgSalary
    FROM EMPLOYEE;
    
    DBMS_OUTPUT.PUT_LINE('AVG: ' || avgSalary || ' BOOLEAN (1 True, 0 False): ' || doesIdExist);
END;
/ 

BEGIN
UPDATE_EMPLOYEE(5);
END;




--DROP USER guest CASCADE;
--
--
--/*******************************************************************************
--   Create database
--********************************************************************************/
--CREATE USER guest
--IDENTIFIED BY p4ssw0rd
--DEFAULT TABLESPACE users
--TEMPORARY TABLESPACE temp
--QUOTA 10M ON users;
--
--GRANT connect to guest;
--GRANT resource to guest;
--GRANT create session TO guest;
--GRANT create table TO guest;
--GRANT create view TO guest;
--




